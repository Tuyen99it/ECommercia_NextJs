import configPromise from '@payload-config'
import { getPayload } from 'payload'
import {Category} from "@/payload-types"
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../globals.css";
import Navbar from "./navbar";
import Footer from "./footer";
import SearchFilters from "./search-filter";
const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default async function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    const payload = await getPayload({
        config: configPromise,
    })
    const data = await payload.find({
        collection: "categories",
        depth: 1, //populate subcategories
        pagination:false,
        where: {
            parent: {
                exists: false,
            }
        }
    })
    const formattedData=data.docs.map((doc: any)=>({
        ...doc,
        subcategories:(doc.subcategories?.docs??[]).map((doc: any)=>({
            // because of "depth:1" we are fonfident  doc wil be a type of "category"
            ...(doc as Category),
        }))
     }))
    console.log(data);
    return (
        <html lang="en">
            <body
                className={`${geistSans.variable} ${geistMono.variable} antialiased`}
            >
                <Navbar />
                <SearchFilters data={formattedData} />
                <div className="flex-1">
                    {children}
                </div>
                <Footer />
            </body>
        </html>
    );
}
